// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`model.semantics should parse a package declaration 1`] = `
{
  "interfaces": [],
  "name": "foo:bar@0.0.1",
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse a record 1`] = `
{
  "interfaces": [
    {
      "functions": [],
      "name": "bar",
      "typeDefs": [
        {
          "fields": [
            {
              "name": "a",
              "type": "string",
            },
            {
              "name": "b",
              "type": "int",
            },
          ],
          "kind": "record",
          "name": "foo",
        },
      ],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse a world 1`] = `
{
  "interfaces": [],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [
    {
      "exports": {
        "functions": [],
        "interfaces": [],
      },
      "imports": {
        "functions": [],
        "interfaces": [],
      },
      "name": "foo",
    },
  ],
}
`;

exports[`model.semantics should parse a world with an exported function 1`] = `
{
  "interfaces": [],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [
    {
      "exports": {
        "functions": [
          {
            "name": "bar",
            "params": [],
            "result": "string",
          },
        ],
        "interfaces": [],
      },
      "imports": {
        "functions": [],
        "interfaces": [],
      },
      "name": "foo",
    },
  ],
}
`;

exports[`model.semantics should parse a world with an exported interface 1`] = `
{
  "interfaces": [],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [
    {
      "exports": {
        "functions": [],
        "interfaces": [
          {
            "functions": [],
            "name": "bar",
            "typeDefs": [],
          },
        ],
      },
      "imports": {
        "functions": [],
        "interfaces": [],
      },
      "name": "foo",
    },
  ],
}
`;

exports[`model.semantics should parse a world with an imported function 1`] = `
{
  "interfaces": [],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [
    {
      "exports": {
        "functions": [],
        "interfaces": [],
      },
      "imports": {
        "functions": [
          {
            "name": "bar",
            "params": [],
            "result": "string",
          },
        ],
        "interfaces": [],
      },
      "name": "foo",
    },
  ],
}
`;

exports[`model.semantics should parse a world with an imported interface 1`] = `
{
  "interfaces": [],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [
    {
      "exports": {
        "functions": [],
        "interfaces": [],
      },
      "imports": {
        "functions": [],
        "interfaces": [
          {
            "functions": [],
            "name": "bar",
            "typeDefs": [],
          },
        ],
      },
      "name": "foo",
    },
  ],
}
`;

exports[`model.semantics should parse a world with an interface with members  1`] = `
{
  "interfaces": [],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [
    {
      "exports": {
        "functions": [],
        "interfaces": [
          {
            "functions": [
              {
                "name": "method",
                "params": [],
                "result": "string",
              },
            ],
            "name": "bar",
            "typeDefs": [],
          },
        ],
      },
      "imports": {
        "functions": [],
        "interfaces": [],
      },
      "name": "foo",
    },
  ],
}
`;

exports[`model.semantics should parse an interface declaration 1`] = `
{
  "interfaces": [
    {
      "functions": [],
      "name": "bar",
      "typeDefs": [],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse an interface declaration with a parameterized function 1`] = `
{
  "interfaces": [
    {
      "functions": [
        {
          "name": "method",
          "params": [
            {
              "name": "a",
              "type": "string",
            },
            [],
            [],
          ],
          "result": "string",
        },
      ],
      "name": "bar",
      "typeDefs": [],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse an interface declaration with a parameterless function 1`] = `
{
  "interfaces": [
    {
      "functions": [
        {
          "name": "method",
          "params": [],
          "result": "string",
        },
      ],
      "name": "bar",
      "typeDefs": [],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse an interface with a type alias 1`] = `
{
  "interfaces": [
    {
      "functions": [],
      "name": "bar",
      "typeDefs": [
        {
          "kind": "alias",
          "name": "foo",
          "type": "string",
        },
      ],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse an interface with a type alias pointing to a list 1`] = `
{
  "interfaces": [
    {
      "functions": [],
      "name": "bar",
      "typeDefs": [
        {
          "kind": "alias",
          "name": "foo",
          "type": {
            "kind": "list",
            "type": "string",
          },
        },
      ],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse an interface with a type alias pointing to a result 1`] = `
{
  "interfaces": [
    {
      "functions": [],
      "name": "bar",
      "typeDefs": [
        {
          "kind": "alias",
          "name": "foo",
          "type": {
            "error": undefined,
            "kind": "result",
            "ok": "string",
          },
        },
      ],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse an interface with a type alias pointing to a tuple 1`] = `
{
  "interfaces": [
    {
      "functions": [],
      "name": "bar",
      "typeDefs": [
        {
          "kind": "alias",
          "name": "foo",
          "type": {
            "items": [
              "string",
              "s16",
            ],
            "kind": "tuple",
          },
        },
      ],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse an interface with a type alias pointing to an option 1`] = `
{
  "interfaces": [
    {
      "functions": [],
      "name": "bar",
      "typeDefs": [
        {
          "kind": "alias",
          "name": "foo",
          "type": {
            "kind": "option",
            "type": "string",
          },
        },
      ],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse an interface with a variant 1`] = `
{
  "interfaces": [
    {
      "functions": [],
      "name": "bar",
      "typeDefs": [
        {
          "cases": [
            {
              "name": "A",
              "type": "string",
            },
            {
              "name": "B",
              "type": undefined,
            },
            {
              "name": "C",
              "type": undefined,
            },
          ],
          "kind": "variant",
          "name": "foo",
        },
      ],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse an interface with an enum 1`] = `
{
  "interfaces": [
    {
      "functions": [],
      "name": "bar",
      "typeDefs": [
        {
          "cases": [
            "A",
            "B",
            "C",
          ],
          "kind": "enum",
          "name": "foo",
        },
      ],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse an interface with an enum 2`] = `
{
  "interfaces": [
    {
      "functions": [],
      "name": "bar",
      "typeDefs": [
        {
          "cases": [
            "A",
            "B",
            "C",
          ],
          "kind": "enum",
          "name": "foo",
        },
      ],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse flags 1`] = `
{
  "interfaces": [
    {
      "functions": [],
      "name": "bar",
      "typeDefs": [
        {
          "fields": [
            "A",
            "B",
            "C",
          ],
          "kind": "flags",
          "name": "foo",
        },
      ],
    },
  ],
  "name": undefined,
  "packages": [],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse nested packages 1`] = `
{
  "interfaces": [],
  "name": undefined,
  "packages": [
    {
      "interfaces": [],
      "name": "foo:bar@0.0.1",
    },
  ],
  "uses": [],
  "worlds": [],
}
`;

exports[`model.semantics should parse top level use statements 1`] = `
{
  "interfaces": [],
  "name": undefined,
  "packages": [],
  "uses": [
    {
      "alias": undefined,
      "path": "foo:bar@0.0.1",
    },
  ],
  "worlds": [],
}
`;

exports[`model.semantics should parse top level use statements with an alias 1`] = `
{
  "interfaces": [],
  "name": undefined,
  "packages": [],
  "uses": [
    {
      "alias": "baz",
      "path": "foo:bar@0.0.1",
    },
  ],
  "worlds": [],
}
`;
